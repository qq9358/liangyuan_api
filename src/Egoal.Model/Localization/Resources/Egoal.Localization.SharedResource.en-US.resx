<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptRefund" xml:space="preserve">
    <value>{0} Accept Refund</value>
  </data>
  <data name="AcceptRefundNote" xml:space="preserve">
    <value>Your refund has been accepted by {0}</value>
  </data>
  <data name="Alipay" xml:space="preserve">
    <value>Alipay</value>
  </data>
  <data name="ApplyRefund" xml:space="preserve">
    <value>Apply Refund</value>
  </data>
  <data name="Audited" xml:space="preserve">
    <value>Audited</value>
  </data>
  <data name="AuditedName" xml:space="preserve">
    <value>Audited</value>
  </data>
  <data name="AuditedRefundNote" xml:space="preserve">
    <value>A ￥{0} refund application will be submitted to {1}</value>
  </data>
  <data name="AuditingName" xml:space="preserve">
    <value>Auditing</value>
  </data>
  <data name="AuditingRefundNote" xml:space="preserve">
    <value>Finish processing before {0} at latest, please wait patiently.</value>
  </data>
  <data name="Canceled" xml:space="preserve">
    <value>Canceled</value>
  </data>
  <data name="CertBuyLimit" xml:space="preserve">
    <value>Certificate {0} too many tickets</value>
  </data>
  <data name="CertRepeat" xml:space="preserve">
    <value>Id number {0} is repeated</value>
  </data>
  <data name="CodeNotNull" xml:space="preserve">
    <value>Code Required</value>
  </data>
  <data name="Collected" xml:space="preserve">
    <value>Collected</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="Expired" xml:space="preserve">
    <value>Expired</value>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>Fri</value>
  </data>
  <data name="Icbc" xml:space="preserve">
    <value>Icbc</value>
  </data>
  <data name="InBlacklist" xml:space="preserve">
    <value>In Blacklist</value>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>Mon</value>
  </data>
  <data name="NoData" xml:space="preserve">
    <value>NoData</value>
  </data>
  <data name="PayAccount" xml:space="preserve">
    <value>pay account</value>
  </data>
  <data name="Paying" xml:space="preserve">
    <value>Paying</value>
  </data>
  <data name="PriceNotSet" xml:space="preserve">
    <value>{0} price not set</value>
  </data>
  <data name="ProcessingRefund" xml:space="preserve">
    <value>{0} Is Processing Your Refund</value>
  </data>
  <data name="ProcessingRefundNote" xml:space="preserve">
    <value>It is expected that {0} will be processed within 1 day.You can use the transaction number {1} to call {2} customer service {3} to check the specific processing progress.</value>
  </data>
  <data name="RefundAuditFail" xml:space="preserve">
    <value>Refund Audit Fail</value>
  </data>
  <data name="Refunded" xml:space="preserve">
    <value>Refunded</value>
  </data>
  <data name="RefundedStatusName" xml:space="preserve">
    <value>{0} Refunded</value>
  </data>
  <data name="RefundFail" xml:space="preserve">
    <value>{0} Refund Fail</value>
  </data>
  <data name="RefundFailStatusName" xml:space="preserve">
    <value>{0} RefundFail</value>
  </data>
  <data name="Refunding" xml:space="preserve">
    <value>Refunding</value>
  </data>
  <data name="RefundingStatusName" xml:space="preserve">
    <value>{0} Refunding</value>
  </data>
  <data name="RefundProgress" xml:space="preserve">
    <value>Refund Progress: {0}</value>
  </data>
  <data name="RefundReceived" xml:space="preserve">
    <value>Received</value>
  </data>
  <data name="RefundRecord" xml:space="preserve">
    <value>Refund Record ({0})</value>
  </data>
  <data name="RefundRecorded" xml:space="preserve">
    <value>Refund Recorded</value>
  </data>
  <data name="RefundRecordedNote" xml:space="preserve">
    <value>{0} has been credited to your {3} before {1}.If you have any questions, please use the transaction number {4} to call {5} customer service {6} for consultation.</value>
  </data>
  <data name="RefundRecording" xml:space="preserve">
    <value>{0} Recording</value>
  </data>
  <data name="RefundRecordingNote" xml:space="preserve">
    <value>{0} is putting ￥{1} into your {2} account, and it is expected that {3} will be completed at the latest.Please use the transaction number {4} to call {5} customer service {6} to check the specific progress of account entry.</value>
  </data>
  <data name="RefundTimeDescription" xml:space="preserve">
    <value>It is expected that {0} will arrive at the latest</value>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>Sat</value>
  </data>
  <data name="SubCollected" xml:space="preserve">
    <value>Sub Collected</value>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>Sun</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>Thu</value>
  </data>
  <data name="TodayBookTimeExpired" xml:space="preserve">
    <value>You are no longer able to purchase today's tickets. The latest time to purchase tickets is :{0}</value>
  </data>
  <data name="TodayBuyTooMuch" xml:space="preserve">
    <value>More tickets available today</value>
  </data>
  <data name="QuantityAvailabelBeyondTravelDate" xml:space="preserve">
    <value>The upper limit of appointment is {0} people. Please contact customer service 020-81819653 if you exceed the limit</value>
  </data>
  <data name="TouristEmpty" xml:space="preserve">
    <value>Pedestrian information cannot be empty</value>
  </data>
  <data name="TouristQuantity" xml:space="preserve">
    <value>{0} pedestrians should be filled in</value>
  </data>
  <data name="TravelDateCannotBook" xml:space="preserve">
    <value>{0} cannot be booked</value>
  </data>
  <data name="Tuesday" xml:space="preserve">
    <value>Tue</value>
  </data>
  <data name="Unaudited" xml:space="preserve">
    <value>Unaudited</value>
  </data>
  <data name="Using" xml:space="preserve">
    <value>Using</value>
  </data>
  <data name="WeChat" xml:space="preserve">
    <value>WeChat</value>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>Wed</value>
  </data>
  <data name="PhoneNumRegistered" xml:space="preserve">
    <value>Phone number registered</value>
  </data>
  <data name="EmailRegistered" xml:space="preserve">
    <value>Email address registered</value>
  </data>
  <data name="WeChatStockInsufficient" xml:space="preserve">
    <value>WeChat stock insufficient</value>
  </data>
  <data name="WeChatNumberTodayBuyTooMuch" xml:space="preserve">
    <value>Has exceeded the number of person products available today</value>
  </data>
  <data name="FreeTicket" xml:space="preserve">
    <value>Free Ticket</value>
  </data>
</root>